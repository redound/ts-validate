import Dictionary from "ts-core/lib/Data/Dictionary";
import { ValidatorInterface } from "./ValidatorInterface";
import { MessageInterface } from "./MessageInterface";
import Collection from "ts-core/lib/Data/Collection";
export default class Validation {
    protected _data: any;
    protected _entity: any;
    protected _validators: Dictionary<string, ValidatorInterface>;
    protected _messages: Collection<MessageInterface>;
    protected _defaultMessages: any;
    protected _labels: Dictionary<string, string>;
    protected _values: any;
    construct(validators: Dictionary<string, ValidatorInterface>): void;
    initialize(): void;
    protected beforeValidation(data: any, entity: any, messages: Collection<MessageInterface>): void;
    protected afterValidation(data: any, entity: any, messages: Collection<MessageInterface>): void;
    validate(data?: any, entity?: any): Collection<MessageInterface>;
    add(field: string, validator: ValidatorInterface): this;
    presenceOf(field: string, message?: string): this;
    identical(field: string, accepted?: any, message?: string): this;
    email(field: string, message?: string): this;
    exclusionIn(field: string, domain: any[], message?: string): this;
    inclusionIn(field: string, domain: any[], message?: string): this;
    regex(field: string, pattern: RegExp, message?: string): this;
    stringLength(field: string, min: number, max: number, messageMinimum?: string, messageMaximum?: string): this;
    between(field: string, minimum: number, maximum: number, message?: string): this;
    confirmation(field: string, against: string, message?: string): this;
    url(field: string, message?: string): this;
    rule(field: string, validator: ValidatorInterface): this;
    rules(field: string, validators?: ValidatorInterface[]): this;
    getValidators(): Dictionary<string, ValidatorInterface>;
    getEntity(): any;
    setDefaultMessages(messages?: any): any;
    getDefaultMessage(type: string): string;
    getMessages(): Collection<MessageInterface>;
    setLabels(labels: Dictionary<string, string>): void;
    getLabel(field: string): string;
    appendMessage(message: MessageInterface): this;
    bind(entity: any, data: any): this;
    getValue(field: string): any;
}
